# -*- coding: utf-8 -*-
"""
Created on Wed Sep 20 14:50:33 2017

@author: Mario Bajenting MarioBajenting@live.com
@author: Cesar Hernandez hernandezcesar746@gmail.com
"""

"""Main Code for the hw"""

import turtle
import math
import random

def draw_right_triangle(name, color, length, degrees, x, y):
    degrees_in_radians = math.radians(degrees)
    name.pencolor(color)

    name.penup()
    name.goto(x, y)

    name.pendown()

    name.forward(-length)
    name.left(degrees)
    name.forward(length / math.cos(degrees_in_radians))
    name.right(90 + degrees)
    name.forward(length * math.tan(degrees_in_radians))

    name.penup()
    name.left(90)


def draw_rectangle(name, color, side1, side2, x, y):
    name.penup()
    name.goto(x, y)
    name.pencolor(color)
    name.fillcolor(color)

# turtle movement
    i = 0
    name.begin_fill()
    while (i < 2):
        name.forward(side1)
        name.left(90)
        name.forward(side2)
        name.left(90)

        i += 1
    name.end_fill()
    name.penup()

#this function is used to draw/create the fireworks
def draw_firework(name, size, x, y):
    name.penup()
    name.goto(x, y)
    degrees = 2
    name.pendown()

    while degrees < 360:
        r = random.random()
        g = random.random()
        b = random.random()

        name.seth(degrees)
        name.color(r, g, b)
        name.pensize(random.randint(1, 5))
        name.forward(random.randint(0, size))
        name.goto(x, y)
        degrees += 1

    name.penup()

#this has the fireworks go to random locations and random size 
def draw_fireworks(name, n, size, min_x, max_x, min_y, max_y):
    name.penup()
    name.pendown()
    while(0 != n):
        x = random.randint(min_x, max_x)
        y = random.randint(min_y, max_y)
        draw_firework(name, size, x, y)
        n -= 1
    name.penup()
"""Start of the code for the Event Handler"""

#this is the same code as above but the original
def crawl():
    
    global cesar, window_width, width, height 
    i = 0

    cesar.pensize(1)

    while i < 100:
        
        r = random.random()
        g = random.random()
        b = random.random()
        cesar.color(r, g, b)
        cesar.seth(random.randint(0, 180))
        cesar.forward(5)
        i += 1
        
    width = random.randint(10, int(window_width // 10))
    height = random.randint(100, int(window_height / 2))
    cesar.goto(random.randint(-width, width), random.randint(-325, height/2))
    #cesar.goto(random.ranint(-height, height), random.ranint(-height, height))
    #cesar.goto(random.randint(-500, 750))


def firework_event_handler():
    global cesar
    x = cesar.xcor()
    y = cesar.ycor()
    degrees = 0
    while degrees < 360:
        cesar.pendown()
        r = random.random()
        g = random.random()
        b = random.random()

        cesar.seth(degrees)
        cesar.color(r, g, b)
        cesar.goto(x, y)
        cesar.pensize(random.randint(1, 5))
        cesar.forward(random.randint(0, 100))
        cesar.penup()
        degrees += 2
"""End of the code of Event Handler"""

"""Skyline Functions
    draws the skyline"""
def draw_rectangles(name, color, width, height):
    name.penup()
    name.pencolor(color)
    name.fillcolor(color)

    i = 0
    name.begin_fill()
    while (i < 2):
        name.forward(width)
        name.left(90)
        name.forward(height)
        name.left(90)
        i += 1
    name.end_fill()
    name.penup()


def draw_skyline(name, color):
    global space
    name.penup()
    name.setx(-window_width / 2)
    name.sety(-window_height / 2)
    name.pencolor(color)
    name.pendown()

    space = 0
    skyline_width = 0
    while skyline_width <= window_width:
        width = random.randint(10, int(window_width // 10))
        height = random.randint(100, int(window_height / 2))
        draw_rectangles(name, color, width, height)
        #charm(name, color, width, height, space)
        name.forward(width)
        skyline_width += width
"""End of the functions for skyline"""

"""Function code  for the stripe filling
    colors the skyline """
#def draw_hypotenuse(name, color, width, degrees):
#    name.penup()
#    name.pencolor(color)
#    degrees_in_radians = math.radians(degrees)
#
#    name.pendown()
#
#    name.left(degrees)
#
#    name.forward(width / math.cos(degrees_in_radians))
#
#    name.penup()
#    name.seth(0)
#
#def stripes(name, color, height, width):
#    global degrees, angle
#    name.penup()
#    # draws along base
#    x_pos = name.xcor()
#    y_pos = name.ycor()
#    space = 10
#
#    while space < width:
#        draw_hypotenuse(name, color, angle)
#        x_pos -= 10
#        name.goto(x_pos, y_pos)
#        space += 10
#
#    base = name.ycor()
#    space = 10
#    name.sety(y_pos + height)
#    y_pos = name.ycor()
#
#    while y_pos > base:
#        draw_hypotenuse(color, space, angle+180)
#        y_pos -= 10
#        name.goto(x_pos, y_pos)
#        space += 10
def draw_hypotenuse(name, base, height):

    name.penup()



    name.pendown()

    name.left(135)

    name.forward(math.sqrt(math.pow(base, 2) + math.pow(height, 2)))



    name.penup()

    name.seth(0)





def charm(name, color, width, height, space):

    name.penup()

    name.pencolor(color)



    x_pos = name.xcor()

    x_max = x_pos + width

    y_pos = name.ycor()

    y_max = y_pos + height

    y_cur = 0



    space_x = space

    space_y = space



    while (x_pos <= x_max) & (y_cur < y_max):

        draw_hypotenuse(name, space_x, space_y)

        y_cur = name.ycor()

        x_pos += space

        space_x += space

        space_y += space

        name.goto(x_pos, y_pos)



    while (x_pos <= x_max):

        draw_hypotenuse(name, space_x, space_y)

        x_pos += space

        name.goto(x_pos, y_pos)



    while (y_cur <= y_max):

        draw_hypotenuse(name, space_x, space_y)

        y_cur = name.ycor()

        y_pos += space

        name.goto(x_pos, y_pos)



    while space_y > 0:

        draw_hypotenuse(name, space_x, space_y)

        y_pos += space

        name.goto(x_pos, y_pos)

        space_x -= space

        space_y -= space
        







"""End of the function for the stripe filling"""






"""Start of the skyline variables
    sets the window height and width and uses it to create the skyline"""
cesar = turtle.Turtle()
cesar.pensize(1)
cesar.speed(0)
cesar.penup()


window_height = random.randint(550, 750)
window_width = random.randint(500, 750)
turtle.setup(window_width, window_height)

"""End of the Skyline Code"""

"""Start of the code for the Event Handler"""

turtle.setup(random.randint(500, 745), random.randint(500, 745))
wn = turtle.Screen()
wn.bgcolor("light blue")

"""End of the Event Handler Code"""

'''Test Functions'''
#draw_right_triangle(cesar, "red", 100, 60)
#draw_firework(100, 0, 0)
draw_skyline(cesar, "black")
#draw_fireworks(cesar, 3, 50, -100, 200, 0, 200)

#variables for the event fuctions 
wn.onkey(crawl, "c") #when the key "c" is pressed the crawl function intitiates
wn.onkey(firework_event_handler, "f")#when the key "f" is pressed the firework function initiates
wn.listen(crawl, "c")
wn.listen(firework_event_handler, "f")
wn.mainloop()



turtle.exitonclick()
